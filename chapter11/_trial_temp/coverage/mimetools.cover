    1: """Various tools used by MIME-reading or MIME-writing programs."""
       
       
    1: import os
    1: import sys
    1: import tempfile
    1: from warnings import filterwarnings, catch_warnings
    1: with catch_warnings():
    1:     if sys.py3kwarning:
>>>>>>         filterwarnings("ignore", ".*rfc822 has been removed", DeprecationWarning)
    1:     import rfc822
       
    1: from warnings import warnpy3k
    1: warnpy3k("in 3.x, mimetools has been removed in favor of the email package",
    1:          stacklevel=2)
       
    1: __all__ = ["Message","choose_boundary","encode","decode","copyliteral",
    1:            "copybinary"]
       
    2: class Message(rfc822.Message):
           """A derived class of rfc822.Message that knows about MIME headers and
    1:     contains some hooks for decoding encoded and multipart messages."""
       
    1:     def __init__(self, fp, seekable = 1):
>>>>>>         rfc822.Message.__init__(self, fp, seekable)
               self.encodingheader = \
>>>>>>                 self.getheader('content-transfer-encoding')
               self.typeheader = \
>>>>>>                 self.getheader('content-type')
>>>>>>         self.parsetype()
>>>>>>         self.parseplist()
       
    1:     def parsetype(self):
>>>>>>         str = self.typeheader
>>>>>>         if str is None:
>>>>>>             str = 'text/plain'
>>>>>>         if ';' in str:
>>>>>>             i = str.index(';')
>>>>>>             self.plisttext = str[i:]
>>>>>>             str = str[:i]
               else:
>>>>>>             self.plisttext = ''
>>>>>>         fields = str.split('/')
>>>>>>         for i in range(len(fields)):
>>>>>>             fields[i] = fields[i].strip().lower()
>>>>>>         self.type = '/'.join(fields)
>>>>>>         self.maintype = fields[0]
>>>>>>         self.subtype = '/'.join(fields[1:])
       
    1:     def parseplist(self):
>>>>>>         str = self.plisttext
>>>>>>         self.plist = []
>>>>>>         while str[:1] == ';':
>>>>>>             str = str[1:]
>>>>>>             if ';' in str:
                       # XXX Should parse quotes!
>>>>>>                 end = str.index(';')
                   else:
>>>>>>                 end = len(str)
>>>>>>             f = str[:end]
>>>>>>             if '=' in f:
>>>>>>                 i = f.index('=')
                       f = f[:i].strip().lower() + \
>>>>>>                         '=' + f[i+1:].strip()
>>>>>>             self.plist.append(f.strip())
>>>>>>             str = str[end:]
       
    1:     def getplist(self):
>>>>>>         return self.plist
       
    1:     def getparam(self, name):
>>>>>>         name = name.lower() + '='
>>>>>>         n = len(name)
>>>>>>         for p in self.plist:
>>>>>>             if p[:n] == name:
>>>>>>                 return rfc822.unquote(p[n:])
>>>>>>         return None
       
    1:     def getparamnames(self):
>>>>>>         result = []
>>>>>>         for p in self.plist:
>>>>>>             i = p.find('=')
>>>>>>             if i >= 0:
>>>>>>                 result.append(p[:i].lower())
>>>>>>         return result
       
    1:     def getencoding(self):
>>>>>>         if self.encodingheader is None:
>>>>>>             return '7bit'
>>>>>>         return self.encodingheader.lower()
       
    1:     def gettype(self):
>>>>>>         return self.type
       
    1:     def getmaintype(self):
>>>>>>         return self.maintype
       
    1:     def getsubtype(self):
>>>>>>         return self.subtype
       
       
       
       
       # Utility functions
       # -----------------
       
    1: try:
    1:     import thread
>>>>>> except ImportError:
>>>>>>     import dummy_thread as thread
    1: _counter_lock = thread.allocate_lock()
    1: del thread
       
    1: _counter = 0
    1: def _get_next_counter():
           global _counter
>>>>>>     _counter_lock.acquire()
>>>>>>     _counter += 1
>>>>>>     result = _counter
>>>>>>     _counter_lock.release()
>>>>>>     return result
       
    1: _prefix = None
       
    1: def choose_boundary():
           """Return a string usable as a multipart boundary.
       
           The string chosen is unique within a single program run, and
           incorporates the user id (if available), process id (if available),
           and current time.  So it's very unlikely the returned string appears
           in message text, but there's no guarantee.
       
           The boundary contains dots so you have to quote it in the header."""
       
           global _prefix
>>>>>>     import time
>>>>>>     if _prefix is None:
>>>>>>         import socket
>>>>>>         try:
>>>>>>             hostid = socket.gethostbyname(socket.gethostname())
>>>>>>         except socket.gaierror:
>>>>>>             hostid = '127.0.0.1'
>>>>>>         try:
>>>>>>             uid = repr(os.getuid())
>>>>>>         except AttributeError:
>>>>>>             uid = '1'
>>>>>>         try:
>>>>>>             pid = repr(os.getpid())
>>>>>>         except AttributeError:
>>>>>>             pid = '1'
>>>>>>         _prefix = hostid + '.' + uid + '.' + pid
>>>>>>     return "%s.%.3f.%d" % (_prefix, time.time(), _get_next_counter())
       
       
       # Subroutines for decoding some common content-transfer-types
       
    1: def decode(input, output, encoding):
           """Decode common content-transfer-encodings (base64, quopri, uuencode)."""
>>>>>>     if encoding == 'base64':
>>>>>>         import base64
>>>>>>         return base64.decode(input, output)
>>>>>>     if encoding == 'quoted-printable':
>>>>>>         import quopri
>>>>>>         return quopri.decode(input, output)
>>>>>>     if encoding in ('uuencode', 'x-uuencode', 'uue', 'x-uue'):
>>>>>>         import uu
>>>>>>         return uu.decode(input, output)
>>>>>>     if encoding in ('7bit', '8bit'):
>>>>>>         return output.write(input.read())
>>>>>>     if encoding in decodetab:
>>>>>>         pipethrough(input, decodetab[encoding], output)
           else:
>>>>>>         raise ValueError, \
>>>>>>               'unknown Content-Transfer-Encoding: %s' % encoding
       
    1: def encode(input, output, encoding):
           """Encode common content-transfer-encodings (base64, quopri, uuencode)."""
>>>>>>     if encoding == 'base64':
>>>>>>         import base64
>>>>>>         return base64.encode(input, output)
>>>>>>     if encoding == 'quoted-printable':
>>>>>>         import quopri
>>>>>>         return quopri.encode(input, output, 0)
>>>>>>     if encoding in ('uuencode', 'x-uuencode', 'uue', 'x-uue'):
>>>>>>         import uu
>>>>>>         return uu.encode(input, output)
>>>>>>     if encoding in ('7bit', '8bit'):
>>>>>>         return output.write(input.read())
>>>>>>     if encoding in encodetab:
>>>>>>         pipethrough(input, encodetab[encoding], output)
           else:
>>>>>>         raise ValueError, \
>>>>>>               'unknown Content-Transfer-Encoding: %s' % encoding
       
       # The following is no longer used for standard encodings
       
       # XXX This requires that uudecode and mmencode are in $PATH
       
       uudecode_pipe = '''(
       TEMP=/tmp/@uu.$$
       sed "s%^begin [0-7][0-7]* .*%begin 600 $TEMP%" | uudecode
       cat $TEMP
       rm $TEMP
    1: )'''
       
    1: decodetab = {
    1:         'uuencode':             uudecode_pipe,
    1:         'x-uuencode':           uudecode_pipe,
    1:         'uue':                  uudecode_pipe,
    1:         'x-uue':                uudecode_pipe,
    1:         'quoted-printable':     'mmencode -u -q',
    1:         'base64':               'mmencode -u -b',
       }
       
    1: encodetab = {
    1:         'x-uuencode':           'uuencode tempfile',
    1:         'uuencode':             'uuencode tempfile',
    1:         'x-uue':                'uuencode tempfile',
    1:         'uue':                  'uuencode tempfile',
    1:         'quoted-printable':     'mmencode -q',
    1:         'base64':               'mmencode -b',
       }
       
    1: def pipeto(input, command):
>>>>>>     pipe = os.popen(command, 'w')
>>>>>>     copyliteral(input, pipe)
>>>>>>     pipe.close()
       
    1: def pipethrough(input, command, output):
>>>>>>     (fd, tempname) = tempfile.mkstemp()
>>>>>>     temp = os.fdopen(fd, 'w')
>>>>>>     copyliteral(input, temp)
>>>>>>     temp.close()
>>>>>>     pipe = os.popen(command + ' <' + tempname, 'r')
>>>>>>     copybinary(pipe, output)
>>>>>>     pipe.close()
>>>>>>     os.unlink(tempname)
       
    1: def copyliteral(input, output):
>>>>>>     while 1:
>>>>>>         line = input.readline()
>>>>>>         if not line: break
>>>>>>         output.write(line)
       
    1: def copybinary(input, output):
>>>>>>     BUFSIZE = 8192
>>>>>>     while 1:
>>>>>>         line = input.read(BUFSIZE)
>>>>>>         if not line: break
>>>>>>         output.write(line)
