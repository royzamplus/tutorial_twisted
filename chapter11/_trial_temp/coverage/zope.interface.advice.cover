       ##############################################################################
       #
       # Copyright (c) 2003 Zope Foundation and Contributors.
       # All Rights Reserved.
       #
       # This software is subject to the provisions of the Zope Public License,
       # Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
       # THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
       # WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
       # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
       # FOR A PARTICULAR PURPOSE.
       #
       ##############################################################################
       """Class advice.
       
       This module was adapted from 'protocols.advice', part of the Python
       Enterprise Application Kit (PEAK).  Please notify the PEAK authors
       (pje@telecommunity.com and tsarna@sarna.org) if bugs are found or
       Zope-specific changes are required, so that the PEAK version of this module
       can be kept in sync.
       
       PEAK is a Python application framework that interoperates with (but does
       not require) Zope 3 and Twisted.  It provides tools for manipulating UML
       models, object-relational persistence, aspect-oriented programming, and more.
       Visit the PEAK home page at http://peak.telecommunity.com for more information.
>>>>>> """
       
>>>>>> from types import FunctionType
>>>>>> try:
>>>>>>     from types import ClassType
       except ImportError:  #pragma NO COVER Python > 3.x
>>>>>>     __python3 = True
       else: #pragma NO COVER Python < 3.x
>>>>>>     __python3 = False
           
>>>>>> import sys
       
>>>>>> def getFrameInfo(frame):
           """Return (kind,module,locals,globals) for a frame
       
           'kind' is one of "exec", "module", "class", "function call", or "unknown".
           """
       
    3:     f_locals = frame.f_locals
    3:     f_globals = frame.f_globals
       
    3:     sameNamespace = f_locals is f_globals
    3:     hasModule = '__module__' in f_locals
    3:     hasName = '__name__' in f_globals
       
    3:     sameName = hasModule and hasName
    3:     sameName = sameName and f_globals['__name__']==f_locals['__module__']
       
    3:     module = hasName and sys.modules.get(f_globals['__name__']) or None
       
    3:     namespaceIsModule = module and module.__dict__ is f_globals
       
    3:     if not namespaceIsModule:
               # some kind of funky exec
>>>>>>         kind = "exec"
    3:     elif sameNamespace and not hasModule:
>>>>>>         kind = "module"
    3:     elif sameName and not sameNamespace:
    3:         kind = "class"
>>>>>>     elif not sameNamespace:
>>>>>>         kind = "function call"
           else: # pragma: no cover
               # How can you have f_locals is f_globals, and have '__module__' set?
               # This is probably module-level code, but with a '__module__' variable.
>>>>>>         kind = "unknown"
    3:     return kind, module, f_locals, f_globals
       
       
>>>>>> def addClassAdvisor(callback, depth=2):
           """Set up 'callback' to be passed the containing class upon creation
       
           This function is designed to be called by an "advising" function executed
           in a class suite.  The "advising" function supplies a callback that it
           wishes to have executed when the containing class is created.  The
           callback will be given one argument: the newly created containing class.
           The return value of the callback will be used in place of the class, so
           the callback should return the input if it does not wish to replace the
           class.
       
           The optional 'depth' argument to this function determines the number of
           frames between this function and the targeted class suite.  'depth'
           defaults to 2, since this skips this function's frame and one calling
           function frame.  If you use this function from a function called directly
           in the class suite, the default will be correct, otherwise you will need
           to determine the correct depth yourself.
       
           This function works by installing a special class factory function in
           place of the '__metaclass__' of the containing class.  Therefore, only
           callbacks *after* the last '__metaclass__' assignment in the containing
           class will be executed.  Be sure that classes using "advising" functions
           declare any '__metaclass__' *first*, to ensure all callbacks are run."""
           # This entire approach is invalid under Py3K.  Don't even try to fix
           # the coverage for this block there. :(
    3:     if __python3: #pragma NO COVER
>>>>>>         raise TypeError('Class advice impossible in Python3')
       
    3:     frame = sys._getframe(depth)
    3:     kind, module, caller_locals, caller_globals = getFrameInfo(frame)
       
           # This causes a problem when zope interfaces are used from doctest.
           # In these cases, kind == "exec".
           #
           #if kind != "class":
           #    raise SyntaxError(
           #        "Advice must be in the body of a class statement"
           #    )
       
    3:     previousMetaclass = caller_locals.get('__metaclass__')
    3:     if __python3:   # pragma: no cover
>>>>>>         defaultMetaclass  = caller_globals.get('__metaclass__', type)
           else:
    3:         defaultMetaclass  = caller_globals.get('__metaclass__', ClassType)
       
       
    3:     def advise(name, bases, cdict):
       
    3:         if '__metaclass__' in cdict:
    3:             del cdict['__metaclass__']
       
    3:         if previousMetaclass is None:
    3:             if bases:
                       # find best metaclass or use global __metaclass__ if no bases
    3:                 meta = determineMetaclass(bases)
                   else:
>>>>>>                 meta = defaultMetaclass
       
>>>>>>         elif isClassAdvisor(previousMetaclass):
                   # special case: we can't compute the "true" metaclass here,
                   # so we need to invoke the previous metaclass and let it
                   # figure it out for us (and apply its own advice in the process)
>>>>>>             meta = previousMetaclass
       
               else:
>>>>>>             meta = determineMetaclass(bases, previousMetaclass)
       
    3:         newClass = meta(name,bases,cdict)
       
               # this lets the callback replace the class completely, if it wants to
    3:         return callback(newClass)
       
           # introspection data only, not used by inner function
    3:     advise.previousMetaclass = previousMetaclass
    3:     advise.callback = callback
       
           # install the advisor
    3:     caller_locals['__metaclass__'] = advise
       
       
>>>>>> def isClassAdvisor(ob):
           """True if 'ob' is a class advisor function"""
>>>>>>     return isinstance(ob,FunctionType) and hasattr(ob,'previousMetaclass')
       
       
>>>>>> def determineMetaclass(bases, explicit_mc=None):
           """Determine metaclass from 1+ bases and optional explicit __metaclass__"""
       
    7:     meta = [getattr(b,'__class__',type(b)) for b in bases]
       
    3:     if explicit_mc is not None:
               # The explicit metaclass needs to be verified for compatibility
               # as well, and allowed to resolve the incompatible bases, if any
>>>>>>         meta.append(explicit_mc)
       
    3:     if len(meta)==1:
               # easy case
    2:         return meta[0]
       
    1:     candidates = minimalBases(meta) # minimal set of metaclasses
       
    1:     if not candidates: #pragma NO COVER
               # they're all "classic" classes
>>>>>>         assert(not __python3) # This should not happen under Python 3
>>>>>>         return ClassType
       
    1:     elif len(candidates)>1:
               # We could auto-combine, but for now we won't...
>>>>>>         raise TypeError("Incompatible metatypes",bases)
       
           # Just one, return it
    1:     return candidates[0]
       
       
>>>>>> def minimalBases(classes):
           """Reduce a list of base classes to its ordered minimum equivalent"""
       
    1:     if not __python3: #pragma NO COVER
    3:         classes = [c for c in classes if c is not ClassType]
    1:     candidates = []
       
    3:     for m in classes:
    6:         for n in classes:
    4:             if issubclass(n,m) and m is not n:
>>>>>>                 break
               else:
                   # m has no subclasses in 'classes'
    2:             if m in candidates:
    1:                 candidates.remove(m)    # ensure that we're later in the list
    2:             candidates.append(m)
       
    1:     return candidates
       
