       # -*- test-case-name: twisted.python.test.test_htmlizer -*-
       # Copyright (c) Twisted Matrix Laboratories.
       # See LICENSE for details.
       
       """
       HTML rendering of Python source.
    1: """
       
    1: import tokenize, cgi, keyword
    1: import reflect
       
    2: class TokenPrinter:
       
    1:     currentCol, currentLine = 0, 1
    1:     lastIdentifier = parameters = 0
       
    1:     def __init__(self, writer):
>>>>>>         self.writer = writer
       
    1:     def printtoken(self, type, token, (srow, scol), (erow, ecol), line):
               #print "printtoken(%r,%r,%r,(%r,%r),(%r,%r),%r), row=%r,col=%r" % (
               #    self, type, token, srow,scol, erow,ecol, line,
               #    self.currentLine, self.currentCol)
>>>>>>         if self.currentLine < srow:
>>>>>>             self.writer('\n'*(srow-self.currentLine))
>>>>>>             self.currentLine, self.currentCol = srow, 0
>>>>>>         self.writer(' '*(scol-self.currentCol))
>>>>>>         if self.lastIdentifier:
>>>>>>             type = "identifier"
>>>>>>             self.parameters = 1
>>>>>>         elif type == tokenize.NAME:
>>>>>>              if keyword.iskeyword(token):
>>>>>>                  type = 'keyword'
                    else:
>>>>>>                  if self.parameters:
>>>>>>                      type = 'parameter'
                        else:
>>>>>>                      type = 'variable'
               else:
>>>>>>             type = tokenize.tok_name.get(type).lower()
>>>>>>         self.writer(token, type)
>>>>>>         self.currentCol = ecol
>>>>>>         self.currentLine += token.count('\n')
>>>>>>         if self.currentLine != erow:
>>>>>>             self.currentCol = 0
>>>>>>         self.lastIdentifier = token in ('def', 'class')
>>>>>>         if token == ':':
>>>>>>             self.parameters = 0
       
       
    2: class HTMLWriter:
       
    1:     noSpan = []
       
    1:     def __init__(self, writer):
>>>>>>         self.writer = writer
>>>>>>         noSpan = []
>>>>>>         reflect.accumulateClassList(self.__class__, "noSpan", noSpan)
>>>>>>         self.noSpan = noSpan
       
    1:     def write(self, token, type=None):
>>>>>>         token = cgi.escape(token)
>>>>>>         if (type is None) or (type in self.noSpan):
>>>>>>             self.writer(token)
               else:
>>>>>>             self.writer('<span class="py-src-%s">%s</span>' %
>>>>>>                         (type, token))
       
       
    2: class SmallerHTMLWriter(HTMLWriter):
           """HTMLWriter that doesn't generate spans for some junk.
       
           Results in much smaller HTML output.
    1:     """
    1:     noSpan = ["endmarker", "indent", "dedent", "op", "newline", "nl"]
       
    1: def filter(inp, out, writer=HTMLWriter):
>>>>>>     out.write('<pre>')
>>>>>>     printer = TokenPrinter(writer(out.write).write).printtoken
>>>>>>     try:
>>>>>>         tokenize.tokenize(inp.readline, printer)
>>>>>>     except tokenize.TokenError:
>>>>>>         pass
>>>>>>     out.write('</pre>\n')
       
    1: def main():
>>>>>>     import sys
>>>>>>     filter(open(sys.argv[1]), sys.stdout)
       
    1: if __name__ == '__main__':
>>>>>>    main()
