       # -*- test-case-name: twisted.test.test_policies -*-
       # Copyright (c) Twisted Matrix Laboratories.
       # See LICENSE for details.
       
       """
       Resource limiting policies.
       
       @seealso: See also L{twisted.protocols.htb} for rate limiting.
    1: """
       
    1: from __future__ import division, absolute_import
       
       # system imports
    1: import sys
       
    1: from zope.interface import directlyProvides, providedBy
       
       # twisted imports
    1: from twisted.internet.protocol import ServerFactory, Protocol, ClientFactory
    1: from twisted.internet import error
    1: from twisted.internet.interfaces import ILoggingContext
    1: from twisted.python import log
       
       
    1: def _wrappedLogPrefix(wrapper, wrapped):
           """
           Compute a log prefix for a wrapper and the object it wraps.
       
           @rtype: C{str}
           """
>>>>>>     if ILoggingContext.providedBy(wrapped):
>>>>>>         logPrefix = wrapped.logPrefix()
           else:
>>>>>>         logPrefix = wrapped.__class__.__name__
>>>>>>     return "%s (%s)" % (logPrefix, wrapper.__class__.__name__)
       
       
       
    2: class ProtocolWrapper(Protocol):
           """
           Wraps protocol instances and acts as their transport as well.
       
           @ivar wrappedProtocol: An L{IProtocol<twisted.internet.interfaces.IProtocol>}
               provider to which L{IProtocol<twisted.internet.interfaces.IProtocol>}
               method calls onto this L{ProtocolWrapper} will be proxied.
       
           @ivar factory: The L{WrappingFactory} which created this
               L{ProtocolWrapper}.
    1:     """
       
    1:     disconnecting = 0
       
    1:     def __init__(self, factory, wrappedProtocol):
>>>>>>         self.wrappedProtocol = wrappedProtocol
>>>>>>         self.factory = factory
       
       
    1:     def logPrefix(self):
               """
               Use a customized log prefix mentioning both the wrapped protocol and
               the current one.
               """
>>>>>>         return _wrappedLogPrefix(self, self.wrappedProtocol)
       
       
    1:     def makeConnection(self, transport):
               """
               When a connection is made, register this wrapper with its factory,
               save the real transport, and connect the wrapped protocol to this
               L{ProtocolWrapper} to intercept any transport calls it makes.
               """
>>>>>>         directlyProvides(self, providedBy(transport))
>>>>>>         Protocol.makeConnection(self, transport)
>>>>>>         self.factory.registerProtocol(self)
>>>>>>         self.wrappedProtocol.makeConnection(self)
       
       
           # Transport relaying
       
    1:     def write(self, data):
>>>>>>         self.transport.write(data)
       
       
    1:     def writeSequence(self, data):
>>>>>>         self.transport.writeSequence(data)
       
       
    1:     def loseConnection(self):
>>>>>>         self.disconnecting = 1
>>>>>>         self.transport.loseConnection()
       
       
    1:     def getPeer(self):
>>>>>>         return self.transport.getPeer()
       
       
    1:     def getHost(self):
>>>>>>         return self.transport.getHost()
       
       
    1:     def registerProducer(self, producer, streaming):
>>>>>>         self.transport.registerProducer(producer, streaming)
       
       
    1:     def unregisterProducer(self):
>>>>>>         self.transport.unregisterProducer()
       
       
    1:     def stopConsuming(self):
>>>>>>         self.transport.stopConsuming()
       
       
    1:     def __getattr__(self, name):
>>>>>>         return getattr(self.transport, name)
       
       
           # Protocol relaying
       
    1:     def dataReceived(self, data):
>>>>>>         self.wrappedProtocol.dataReceived(data)
       
       
    1:     def connectionLost(self, reason):
>>>>>>         self.factory.unregisterProtocol(self)
>>>>>>         self.wrappedProtocol.connectionLost(reason)
       
       
       
    2: class WrappingFactory(ClientFactory):
           """
           Wraps a factory and its protocols, and keeps track of them.
    1:     """
       
    1:     protocol = ProtocolWrapper
       
    1:     def __init__(self, wrappedFactory):
>>>>>>         self.wrappedFactory = wrappedFactory
>>>>>>         self.protocols = {}
       
       
    1:     def logPrefix(self):
               """
               Generate a log prefix mentioning both the wrapped factory and this one.
               """
>>>>>>         return _wrappedLogPrefix(self, self.wrappedFactory)
       
       
    1:     def doStart(self):
>>>>>>         self.wrappedFactory.doStart()
>>>>>>         ClientFactory.doStart(self)
       
       
    1:     def doStop(self):
>>>>>>         self.wrappedFactory.doStop()
>>>>>>         ClientFactory.doStop(self)
       
       
    1:     def startedConnecting(self, connector):
>>>>>>         self.wrappedFactory.startedConnecting(connector)
       
       
    1:     def clientConnectionFailed(self, connector, reason):
>>>>>>         self.wrappedFactory.clientConnectionFailed(connector, reason)
       
       
    1:     def clientConnectionLost(self, connector, reason):
>>>>>>         self.wrappedFactory.clientConnectionLost(connector, reason)
       
       
    1:     def buildProtocol(self, addr):
>>>>>>         return self.protocol(self, self.wrappedFactory.buildProtocol(addr))
       
       
    1:     def registerProtocol(self, p):
               """
               Called by protocol to register itself.
               """
>>>>>>         self.protocols[p] = 1
       
       
    1:     def unregisterProtocol(self, p):
               """
               Called by protocols when they go away.
               """
>>>>>>         del self.protocols[p]
       
       
       
    2: class ThrottlingProtocol(ProtocolWrapper):
           """
           Protocol for L{ThrottlingFactory}.
    1:     """
       
           # wrap API for tracking bandwidth
       
    1:     def write(self, data):
>>>>>>         self.factory.registerWritten(len(data))
>>>>>>         ProtocolWrapper.write(self, data)
       
       
    1:     def writeSequence(self, seq):
>>>>>>         self.factory.registerWritten(sum(map(len, seq)))
>>>>>>         ProtocolWrapper.writeSequence(self, seq)
       
       
    1:     def dataReceived(self, data):
>>>>>>         self.factory.registerRead(len(data))
>>>>>>         ProtocolWrapper.dataReceived(self, data)
       
       
    1:     def registerProducer(self, producer, streaming):
>>>>>>         self.producer = producer
>>>>>>         ProtocolWrapper.registerProducer(self, producer, streaming)
       
       
    1:     def unregisterProducer(self):
>>>>>>         del self.producer
>>>>>>         ProtocolWrapper.unregisterProducer(self)
       
       
    1:     def throttleReads(self):
>>>>>>         self.transport.pauseProducing()
       
       
    1:     def unthrottleReads(self):
>>>>>>         self.transport.resumeProducing()
       
       
    1:     def throttleWrites(self):
>>>>>>         if hasattr(self, "producer"):
>>>>>>             self.producer.pauseProducing()
       
       
    1:     def unthrottleWrites(self):
>>>>>>         if hasattr(self, "producer"):
>>>>>>             self.producer.resumeProducing()
       
       
       
    2: class ThrottlingFactory(WrappingFactory):
           """
           Throttles bandwidth and number of connections.
       
           Write bandwidth will only be throttled if there is a producer
           registered.
    1:     """
       
    1:     protocol = ThrottlingProtocol
       
    1:     def __init__(self, wrappedFactory, maxConnectionCount=sys.maxsize,
    1:                  readLimit=None, writeLimit=None):
>>>>>>         WrappingFactory.__init__(self, wrappedFactory)
>>>>>>         self.connectionCount = 0
>>>>>>         self.maxConnectionCount = maxConnectionCount
>>>>>>         self.readLimit = readLimit # max bytes we should read per second
>>>>>>         self.writeLimit = writeLimit # max bytes we should write per second
>>>>>>         self.readThisSecond = 0
>>>>>>         self.writtenThisSecond = 0
>>>>>>         self.unthrottleReadsID = None
>>>>>>         self.checkReadBandwidthID = None
>>>>>>         self.unthrottleWritesID = None
>>>>>>         self.checkWriteBandwidthID = None
       
       
    1:     def callLater(self, period, func):
               """
               Wrapper around L{reactor.callLater} for test purpose.
               """
>>>>>>         from twisted.internet import reactor
>>>>>>         return reactor.callLater(period, func)
       
       
    1:     def registerWritten(self, length):
               """
               Called by protocol to tell us more bytes were written.
               """
>>>>>>         self.writtenThisSecond += length
       
       
    1:     def registerRead(self, length):
               """
               Called by protocol to tell us more bytes were read.
               """
>>>>>>         self.readThisSecond += length
       
       
    1:     def checkReadBandwidth(self):
               """
               Checks if we've passed bandwidth limits.
               """
>>>>>>         if self.readThisSecond > self.readLimit:
>>>>>>             self.throttleReads()
>>>>>>             throttleTime = (float(self.readThisSecond) / self.readLimit) - 1.0
>>>>>>             self.unthrottleReadsID = self.callLater(throttleTime,
>>>>>>                                                     self.unthrottleReads)
>>>>>>         self.readThisSecond = 0
>>>>>>         self.checkReadBandwidthID = self.callLater(1, self.checkReadBandwidth)
       
       
    1:     def checkWriteBandwidth(self):
>>>>>>         if self.writtenThisSecond > self.writeLimit:
>>>>>>             self.throttleWrites()
>>>>>>             throttleTime = (float(self.writtenThisSecond) / self.writeLimit) - 1.0
>>>>>>             self.unthrottleWritesID = self.callLater(throttleTime,
>>>>>>                                                         self.unthrottleWrites)
               # reset for next round
>>>>>>         self.writtenThisSecond = 0
>>>>>>         self.checkWriteBandwidthID = self.callLater(1, self.checkWriteBandwidth)
       
       
    1:     def throttleReads(self):
               """
               Throttle reads on all protocols.
               """
>>>>>>         log.msg("Throttling reads on %s" % self)
>>>>>>         for p in self.protocols.keys():
>>>>>>             p.throttleReads()
       
       
    1:     def unthrottleReads(self):
               """
               Stop throttling reads on all protocols.
               """
>>>>>>         self.unthrottleReadsID = None
>>>>>>         log.msg("Stopped throttling reads on %s" % self)
>>>>>>         for p in self.protocols.keys():
>>>>>>             p.unthrottleReads()
       
       
    1:     def throttleWrites(self):
               """
               Throttle writes on all protocols.
               """
>>>>>>         log.msg("Throttling writes on %s" % self)
>>>>>>         for p in self.protocols.keys():
>>>>>>             p.throttleWrites()
       
       
    1:     def unthrottleWrites(self):
               """
               Stop throttling writes on all protocols.
               """
>>>>>>         self.unthrottleWritesID = None
>>>>>>         log.msg("Stopped throttling writes on %s" % self)
>>>>>>         for p in self.protocols.keys():
>>>>>>             p.unthrottleWrites()
       
       
    1:     def buildProtocol(self, addr):
>>>>>>         if self.connectionCount == 0:
>>>>>>             if self.readLimit is not None:
>>>>>>                 self.checkReadBandwidth()
>>>>>>             if self.writeLimit is not None:
>>>>>>                 self.checkWriteBandwidth()
       
>>>>>>         if self.connectionCount < self.maxConnectionCount:
>>>>>>             self.connectionCount += 1
>>>>>>             return WrappingFactory.buildProtocol(self, addr)
               else:
>>>>>>             log.msg("Max connection count reached!")
>>>>>>             return None
       
       
    1:     def unregisterProtocol(self, p):
>>>>>>         WrappingFactory.unregisterProtocol(self, p)
>>>>>>         self.connectionCount -= 1
>>>>>>         if self.connectionCount == 0:
>>>>>>             if self.unthrottleReadsID is not None:
>>>>>>                 self.unthrottleReadsID.cancel()
>>>>>>             if self.checkReadBandwidthID is not None:
>>>>>>                 self.checkReadBandwidthID.cancel()
>>>>>>             if self.unthrottleWritesID is not None:
>>>>>>                 self.unthrottleWritesID.cancel()
>>>>>>             if self.checkWriteBandwidthID is not None:
>>>>>>                 self.checkWriteBandwidthID.cancel()
       
       
       
    2: class SpewingProtocol(ProtocolWrapper):
    1:     def dataReceived(self, data):
>>>>>>         log.msg("Received: %r" % data)
>>>>>>         ProtocolWrapper.dataReceived(self,data)
       
    1:     def write(self, data):
>>>>>>         log.msg("Sending: %r" % data)
>>>>>>         ProtocolWrapper.write(self,data)
       
       
       
    2: class SpewingFactory(WrappingFactory):
    1:     protocol = SpewingProtocol
       
       
       
    2: class LimitConnectionsByPeer(WrappingFactory):
       
    1:     maxConnectionsPerPeer = 5
       
    1:     def startFactory(self):
>>>>>>         self.peerConnections = {}
       
    1:     def buildProtocol(self, addr):
>>>>>>         peerHost = addr[0]
>>>>>>         connectionCount = self.peerConnections.get(peerHost, 0)
>>>>>>         if connectionCount >= self.maxConnectionsPerPeer:
>>>>>>             return None
>>>>>>         self.peerConnections[peerHost] = connectionCount + 1
>>>>>>         return WrappingFactory.buildProtocol(self, addr)
       
    1:     def unregisterProtocol(self, p):
>>>>>>         peerHost = p.getPeer()[1]
>>>>>>         self.peerConnections[peerHost] -= 1
>>>>>>         if self.peerConnections[peerHost] == 0:
>>>>>>             del self.peerConnections[peerHost]
       
       
    2: class LimitTotalConnectionsFactory(ServerFactory):
           """
           Factory that limits the number of simultaneous connections.
       
           @type connectionCount: C{int}
           @ivar connectionCount: number of current connections.
           @type connectionLimit: C{int} or C{None}
           @cvar connectionLimit: maximum number of connections.
           @type overflowProtocol: L{Protocol} or C{None}
           @cvar overflowProtocol: Protocol to use for new connections when
               connectionLimit is exceeded.  If C{None} (the default value), excess
               connections will be closed immediately.
    1:     """
    1:     connectionCount = 0
    1:     connectionLimit = None
    1:     overflowProtocol = None
       
    1:     def buildProtocol(self, addr):
>>>>>>         if (self.connectionLimit is None or
>>>>>>             self.connectionCount < self.connectionLimit):
                       # Build the normal protocol
>>>>>>                 wrappedProtocol = self.protocol()
>>>>>>         elif self.overflowProtocol is None:
                   # Just drop the connection
>>>>>>             return None
               else:
                   # Too many connections, so build the overflow protocol
>>>>>>             wrappedProtocol = self.overflowProtocol()
       
>>>>>>         wrappedProtocol.factory = self
>>>>>>         protocol = ProtocolWrapper(self, wrappedProtocol)
>>>>>>         self.connectionCount += 1
>>>>>>         return protocol
       
    1:     def registerProtocol(self, p):
>>>>>>         pass
       
    1:     def unregisterProtocol(self, p):
>>>>>>         self.connectionCount -= 1
       
       
       
    2: class TimeoutProtocol(ProtocolWrapper):
           """
           Protocol that automatically disconnects when the connection is idle.
    1:     """
       
    1:     def __init__(self, factory, wrappedProtocol, timeoutPeriod):
               """
               Constructor.
       
               @param factory: An L{IFactory}.
               @param wrappedProtocol: A L{Protocol} to wrapp.
               @param timeoutPeriod: Number of seconds to wait for activity before
                   timing out.
               """
>>>>>>         ProtocolWrapper.__init__(self, factory, wrappedProtocol)
>>>>>>         self.timeoutCall = None
>>>>>>         self.setTimeout(timeoutPeriod)
       
       
    1:     def setTimeout(self, timeoutPeriod=None):
               """
               Set a timeout.
       
               This will cancel any existing timeouts.
       
               @param timeoutPeriod: If not C{None}, change the timeout period.
                   Otherwise, use the existing value.
               """
>>>>>>         self.cancelTimeout()
>>>>>>         if timeoutPeriod is not None:
>>>>>>             self.timeoutPeriod = timeoutPeriod
>>>>>>         self.timeoutCall = self.factory.callLater(self.timeoutPeriod, self.timeoutFunc)
       
       
    1:     def cancelTimeout(self):
               """
               Cancel the timeout.
       
               If the timeout was already cancelled, this does nothing.
               """
>>>>>>         if self.timeoutCall:
>>>>>>             try:
>>>>>>                 self.timeoutCall.cancel()
>>>>>>             except error.AlreadyCalled:
>>>>>>                 pass
>>>>>>             self.timeoutCall = None
       
       
    1:     def resetTimeout(self):
               """
               Reset the timeout, usually because some activity just happened.
               """
>>>>>>         if self.timeoutCall:
>>>>>>             self.timeoutCall.reset(self.timeoutPeriod)
       
       
    1:     def write(self, data):
>>>>>>         self.resetTimeout()
>>>>>>         ProtocolWrapper.write(self, data)
       
       
    1:     def writeSequence(self, seq):
>>>>>>         self.resetTimeout()
>>>>>>         ProtocolWrapper.writeSequence(self, seq)
       
       
    1:     def dataReceived(self, data):
>>>>>>         self.resetTimeout()
>>>>>>         ProtocolWrapper.dataReceived(self, data)
       
       
    1:     def connectionLost(self, reason):
>>>>>>         self.cancelTimeout()
>>>>>>         ProtocolWrapper.connectionLost(self, reason)
       
       
    1:     def timeoutFunc(self):
               """
               This method is called when the timeout is triggered.
       
               By default it calls L{loseConnection}.  Override this if you want
               something else to happen.
               """
>>>>>>         self.loseConnection()
       
       
       
    2: class TimeoutFactory(WrappingFactory):
           """
           Factory for TimeoutWrapper.
    1:     """
    1:     protocol = TimeoutProtocol
       
       
    1:     def __init__(self, wrappedFactory, timeoutPeriod=30*60):
>>>>>>         self.timeoutPeriod = timeoutPeriod
>>>>>>         WrappingFactory.__init__(self, wrappedFactory)
       
       
    1:     def buildProtocol(self, addr):
>>>>>>         return self.protocol(self, self.wrappedFactory.buildProtocol(addr),
>>>>>>                              timeoutPeriod=self.timeoutPeriod)
       
       
    1:     def callLater(self, period, func):
               """
               Wrapper around L{reactor.callLater} for test purpose.
               """
>>>>>>         from twisted.internet import reactor
>>>>>>         return reactor.callLater(period, func)
       
       
       
    2: class TrafficLoggingProtocol(ProtocolWrapper):
       
    1:     def __init__(self, factory, wrappedProtocol, logfile, lengthLimit=None,
    1:                  number=0):
               """
               @param factory: factory which created this protocol.
               @type factory: C{protocol.Factory}.
               @param wrappedProtocol: the underlying protocol.
               @type wrappedProtocol: C{protocol.Protocol}.
               @param logfile: file opened for writing used to write log messages.
               @type logfile: C{file}
               @param lengthLimit: maximum size of the datareceived logged.
               @type lengthLimit: C{int}
               @param number: identifier of the connection.
               @type number: C{int}.
               """
>>>>>>         ProtocolWrapper.__init__(self, factory, wrappedProtocol)
>>>>>>         self.logfile = logfile
>>>>>>         self.lengthLimit = lengthLimit
>>>>>>         self._number = number
       
       
    1:     def _log(self, line):
>>>>>>         self.logfile.write(line + '\n')
>>>>>>         self.logfile.flush()
       
       
    1:     def _mungeData(self, data):
>>>>>>         if self.lengthLimit and len(data) > self.lengthLimit:
>>>>>>             data = data[:self.lengthLimit - 12] + '<... elided>'
>>>>>>         return data
       
       
           # IProtocol
    1:     def connectionMade(self):
>>>>>>         self._log('*')
>>>>>>         return ProtocolWrapper.connectionMade(self)
       
       
    1:     def dataReceived(self, data):
>>>>>>         self._log('C %d: %r' % (self._number, self._mungeData(data)))
>>>>>>         return ProtocolWrapper.dataReceived(self, data)
       
       
    1:     def connectionLost(self, reason):
>>>>>>         self._log('C %d: %r' % (self._number, reason))
>>>>>>         return ProtocolWrapper.connectionLost(self, reason)
       
       
           # ITransport
    1:     def write(self, data):
>>>>>>         self._log('S %d: %r' % (self._number, self._mungeData(data)))
>>>>>>         return ProtocolWrapper.write(self, data)
       
       
    1:     def writeSequence(self, iovec):
>>>>>>         self._log('SV %d: %r' % (self._number, [self._mungeData(d) for d in iovec]))
>>>>>>         return ProtocolWrapper.writeSequence(self, iovec)
       
       
    1:     def loseConnection(self):
>>>>>>         self._log('S %d: *' % (self._number,))
>>>>>>         return ProtocolWrapper.loseConnection(self)
       
       
       
    2: class TrafficLoggingFactory(WrappingFactory):
    1:     protocol = TrafficLoggingProtocol
       
    1:     _counter = 0
       
    1:     def __init__(self, wrappedFactory, logfilePrefix, lengthLimit=None):
>>>>>>         self.logfilePrefix = logfilePrefix
>>>>>>         self.lengthLimit = lengthLimit
>>>>>>         WrappingFactory.__init__(self, wrappedFactory)
       
       
    1:     def open(self, name):
>>>>>>         return file(name, 'w')
       
       
    1:     def buildProtocol(self, addr):
>>>>>>         self._counter += 1
>>>>>>         logfile = self.open(self.logfilePrefix + '-' + str(self._counter))
>>>>>>         return self.protocol(self, self.wrappedFactory.buildProtocol(addr),
>>>>>>                              logfile, self.lengthLimit, self._counter)
       
       
    1:     def resetCounter(self):
               """
               Reset the value of the counter used to identify connections.
               """
>>>>>>         self._counter = 0
       
       
       
    2: class TimeoutMixin:
           """
           Mixin for protocols which wish to timeout connections.
       
           Protocols that mix this in have a single timeout, set using L{setTimeout}.
           When the timeout is hit, L{timeoutConnection} is called, which, by
           default, closes the connection.
       
           @cvar timeOut: The number of seconds after which to timeout the connection.
    1:     """
    1:     timeOut = None
       
    1:     __timeoutCall = None
       
    1:     def callLater(self, period, func):
               """
               Wrapper around L{reactor.callLater} for test purpose.
               """
>>>>>>         from twisted.internet import reactor
>>>>>>         return reactor.callLater(period, func)
       
       
    1:     def resetTimeout(self):
               """
               Reset the timeout count down.
       
               If the connection has already timed out, then do nothing.  If the
               timeout has been cancelled (probably using C{setTimeout(None)}), also
               do nothing.
       
               It's often a good idea to call this when the protocol has received
               some meaningful input from the other end of the connection.  "I've got
               some data, they're still there, reset the timeout".
               """
>>>>>>         if self.__timeoutCall is not None and self.timeOut is not None:
>>>>>>             self.__timeoutCall.reset(self.timeOut)
       
    1:     def setTimeout(self, period):
               """
               Change the timeout period
       
               @type period: C{int} or C{NoneType}
               @param period: The period, in seconds, to change the timeout to, or
               C{None} to disable the timeout.
               """
>>>>>>         prev = self.timeOut
>>>>>>         self.timeOut = period
       
>>>>>>         if self.__timeoutCall is not None:
>>>>>>             if period is None:
>>>>>>                 self.__timeoutCall.cancel()
>>>>>>                 self.__timeoutCall = None
                   else:
>>>>>>                 self.__timeoutCall.reset(period)
>>>>>>         elif period is not None:
>>>>>>             self.__timeoutCall = self.callLater(period, self.__timedOut)
       
>>>>>>         return prev
       
    1:     def __timedOut(self):
>>>>>>         self.__timeoutCall = None
>>>>>>         self.timeoutConnection()
       
    1:     def timeoutConnection(self):
               """
               Called when the connection times out.
       
               Override to define behavior other than dropping the connection.
               """
>>>>>>         self.transport.loseConnection()
