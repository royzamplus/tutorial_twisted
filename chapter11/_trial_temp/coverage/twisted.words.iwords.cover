       # -*- test-case-name: twisted.words.test -*-
       # Copyright (c) Twisted Matrix Laboratories.
       # See LICENSE for details.
       
    1: from zope.interface import Interface, Attribute, implements
       
    2: class IProtocolPlugin(Interface):
           """Interface for plugins providing an interface to a Words service
    1:     """
       
    1:     name = Attribute("A single word describing what kind of interface this is (eg, irc or web)")
       
    1:     def getFactory(realm, portal):
               """Retrieve a C{twisted.internet.interfaces.IServerFactory} provider
       
               @param realm: An object providing C{twisted.cred.portal.IRealm} and
               C{IChatService}, with which service information should be looked up.
       
               @param portal: An object providing C{twisted.cred.portal.IPortal},
               through which logins should be performed.
               """
       
       
    2: class IGroup(Interface):
    1:     name = Attribute("A short string, unique among groups.")
       
    1:     def add(user):
               """Include the given user in this group.
       
               @type user: L{IUser}
               """
       
    1:     def remove(user, reason=None):
               """Remove the given user from this group.
       
               @type user: L{IUser}
               @type reason: C{unicode}
               """
       
    1:     def size():
               """Return the number of participants in this group.
       
               @rtype: L{twisted.internet.defer.Deferred}
               @return: A Deferred which fires with an C{int} representing the the
               number of participants in this group.
               """
       
    1:     def receive(sender, recipient, message):
               """
               Broadcast the given message from the given sender to other
               users in group.
       
               The message is not re-transmitted to the sender.
       
               @param sender: L{IUser}
       
               @type recipient: L{IGroup}
               @param recipient: This is probably a wart.  Maybe it will be removed
               in the future.  For now, it should be the group object the message
               is being delivered to.
       
               @param message: C{dict}
       
               @rtype: L{twisted.internet.defer.Deferred}
               @return: A Deferred which fires with None when delivery has been
               attempted for all users.
               """
       
    1:     def setMetadata(meta):
               """Change the metadata associated with this group.
       
               @type meta: C{dict}
               """
       
    1:     def iterusers():
               """Return an iterator of all users in this group.
               """
       
       
    2: class IChatClient(Interface):
           """Interface through which IChatService interacts with clients.
    1:     """
       
    1:     name = Attribute("A short string, unique among users.  This will be set by the L{IChatService} at login time.")
       
    1:     def receive(sender, recipient, message):
               """
               Callback notifying this user of the given message sent by the
               given user.
       
               This will be invoked whenever another user sends a message to a
               group this user is participating in, or whenever another user sends
               a message directly to this user.  In the former case, C{recipient}
               will be the group to which the message was sent; in the latter, it
               will be the same object as the user who is receiving the message.
       
               @type sender: L{IUser}
               @type recipient: L{IUser} or L{IGroup}
               @type message: C{dict}
       
               @rtype: L{twisted.internet.defer.Deferred}
               @return: A Deferred which fires when the message has been delivered,
               or which fails in some way.  If the Deferred fails and the message
               was directed at a group, this user will be removed from that group.
               """
       
    1:     def groupMetaUpdate(group, meta):
               """
               Callback notifying this user that the metadata for the given
               group has changed.
       
               @type group: L{IGroup}
               @type meta: C{dict}
       
               @rtype: L{twisted.internet.defer.Deferred}
               """
       
    1:     def userJoined(group, user):
               """
               Callback notifying this user that the given user has joined
               the given group.
       
               @type group: L{IGroup}
               @type user: L{IUser}
       
               @rtype: L{twisted.internet.defer.Deferred}
               """
       
    1:     def userLeft(group, user, reason=None):
               """
               Callback notifying this user that the given user has left the
               given group for the given reason.
       
               @type group: L{IGroup}
               @type user: L{IUser}
               @type reason: C{unicode}
       
               @rtype: L{twisted.internet.defer.Deferred}
               """
       
       
    2: class IUser(Interface):
           """Interface through which clients interact with IChatService.
    1:     """
       
    1:     realm = Attribute("A reference to the Realm to which this user belongs.  Set if and only if the user is logged in.")
    1:     mind = Attribute("A reference to the mind which logged in to this user.  Set if and only if the user is logged in.")
    1:     name = Attribute("A short string, unique among users.")
       
    1:     lastMessage = Attribute("A POSIX timestamp indicating the time of the last message received from this user.")
    1:     signOn = Attribute("A POSIX timestamp indicating this user's most recent sign on time.")
       
    1:     def loggedIn(realm, mind):
               """Invoked by the associated L{IChatService} when login occurs.
       
               @param realm: The L{IChatService} through which login is occurring.
               @param mind: The mind object used for cred login.
               """
       
    1:     def send(recipient, message):
               """Send the given message to the given user or group.
       
               @type recipient: Either L{IUser} or L{IGroup}
               @type message: C{dict}
               """
       
    1:     def join(group):
               """Attempt to join the given group.
       
               @type group: L{IGroup}
               @rtype: L{twisted.internet.defer.Deferred}
               """
       
    1:     def leave(group):
               """Discontinue participation in the given group.
       
               @type group: L{IGroup}
               @rtype: L{twisted.internet.defer.Deferred}
               """
       
    1:     def itergroups():
               """
               Return an iterator of all groups of which this user is a
               member.
               """
       
       
    2: class IChatService(Interface):
    1:     name = Attribute("A short string identifying this chat service (eg, a hostname)")
       
    1:     createGroupOnRequest = Attribute(
    1:         "A boolean indicating whether L{getGroup} should implicitly "
               "create groups which are requested but which do not yet exist.")
       
    1:     createUserOnRequest = Attribute(
    1:         "A boolean indicating whether L{getUser} should implicitly "
               "create users which are requested but which do not yet exist.")
       
    1:     def itergroups():
               """Return all groups available on this service.
       
               @rtype: C{twisted.internet.defer.Deferred}
               @return: A Deferred which fires with a list of C{IGroup} providers.
               """
       
    1:     def getGroup(name):
               """Retrieve the group by the given name.
       
               @type name: C{str}
       
               @rtype: L{twisted.internet.defer.Deferred}
               @return: A Deferred which fires with the group with the given
               name if one exists (or if one is created due to the setting of
               L{createGroupOnRequest}, or which fails with
               L{twisted.words.ewords.NoSuchGroup} if no such group exists.
               """
       
    1:     def createGroup(name):
               """Create a new group with the given name.
       
               @type name: C{str}
       
               @rtype: L{twisted.internet.defer.Deferred}
               @return: A Deferred which fires with the created group, or
               with fails with L{twisted.words.ewords.DuplicateGroup} if a
               group by that name exists already.
               """
       
    1:     def lookupGroup(name):
               """Retrieve a group by name.
       
               Unlike C{getGroup}, this will never implicitly create a group.
       
               @type name: C{str}
       
               @rtype: L{twisted.internet.defer.Deferred}
               @return: A Deferred which fires with the group by the given
               name, or which fails with L{twisted.words.ewords.NoSuchGroup}.
               """
       
    1:     def getUser(name):
               """Retrieve the user by the given name.
       
               @type name: C{str}
       
               @rtype: L{twisted.internet.defer.Deferred}
               @return: A Deferred which fires with the user with the given
               name if one exists (or if one is created due to the setting of
               L{createUserOnRequest}, or which fails with
               L{twisted.words.ewords.NoSuchUser} if no such user exists.
               """
       
    1:     def createUser(name):
               """Create a new user with the given name.
       
               @type name: C{str}
       
               @rtype: L{twisted.internet.defer.Deferred}
               @return: A Deferred which fires with the created user, or
               with fails with L{twisted.words.ewords.DuplicateUser} if a
               user by that name exists already.
               """
       
       __all__ = [
    1:     'IChatInterface', 'IGroup', 'IChatClient', 'IUser', 'IChatService',
           ]
