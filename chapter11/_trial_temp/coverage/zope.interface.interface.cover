       ##############################################################################
       #
       # Copyright (c) 2001, 2002 Zope Foundation and Contributors.
       # All Rights Reserved.
       #
       # This software is subject to the provisions of the Zope Public License,
       # Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.
       # THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED
       # WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
       # WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS
       # FOR A PARTICULAR PURPOSE.
       #
       ##############################################################################
       """Interface object implementation
>>>>>> """
>>>>>> from __future__ import generators
       
>>>>>> import sys
>>>>>> from types import MethodType
>>>>>> from types import FunctionType
>>>>>> import warnings
>>>>>> import weakref
       
>>>>>> from zope.interface.exceptions import Invalid
>>>>>> from zope.interface.ro import ro
       
       
>>>>>> CO_VARARGS = 4
>>>>>> CO_VARKEYWORDS = 8
>>>>>> TAGGED_DATA = '__interface_tagged_values__'
       
>>>>>> _decorator_non_return = object()
       
>>>>>> def invariant(call):
>>>>>>     f_locals = sys._getframe(1).f_locals
>>>>>>     tags = f_locals.setdefault(TAGGED_DATA, {})
>>>>>>     invariants = tags.setdefault('invariants', [])
>>>>>>     invariants.append(call)
>>>>>>     return _decorator_non_return
       
       
>>>>>> def taggedValue(key, value):
           """Attaches a tagged value to an interface at definition time."""
>>>>>>     f_locals = sys._getframe(1).f_locals
>>>>>>     tagged_values = f_locals.setdefault(TAGGED_DATA, {})
>>>>>>     tagged_values[key] = value
>>>>>>     return _decorator_non_return
       
       
>>>>>> class Element(object):
       
           # We can't say this yet because we don't have enough
           # infrastructure in place.
           #
           #implements(IElement)
       
>>>>>>     def __init__(self, __name__, __doc__=''):
               """Create an 'attribute' description
               """
   63:         if not __doc__ and __name__.find(' ') >= 0:
   17:             __doc__ = __name__
   17:             __name__ = None
       
   63:         self.__name__=__name__
   63:         self.__doc__=__doc__
   63:         self.__tagged_values = {}
       
>>>>>>     def getName(self):
               """ Returns the name of the object. """
>>>>>>         return self.__name__
       
>>>>>>     def getDoc(self):
               """ Returns the documentation for the object. """
>>>>>>         return self.__doc__
       
>>>>>>     def getTaggedValue(self, tag):
               """ Returns the value associated with 'tag'. """
>>>>>>         return self.__tagged_values[tag]
       
>>>>>>     def queryTaggedValue(self, tag, default=None):
               """ Returns the value associated with 'tag'. """
>>>>>>         return self.__tagged_values.get(tag, default)
       
>>>>>>     def getTaggedValueTags(self):
               """ Returns a list of all tags. """
>>>>>>         return self.__tagged_values.keys()
       
>>>>>>     def setTaggedValue(self, tag, value):
               """ Associates 'value' with 'key'. """
>>>>>>         self.__tagged_values[tag] = value
       
>>>>>> class SpecificationBasePy(object):
       
>>>>>>     def providedBy(self, ob):
               """Is the interface implemented by an object
               """
>>>>>>         spec = providedBy(ob)
>>>>>>         return self in spec._implied
       
>>>>>>     def implementedBy(self, cls):
               """Test whether the specification is implemented by a class or factory.
       
               Raise TypeError if argument is neither a class nor a callable.
               """
>>>>>>         spec = implementedBy(cls)
>>>>>>         return self in spec._implied
       
>>>>>>     def isOrExtends(self, interface):
               """Is the interface the same as or extend the given interface
               """
>>>>>>         return interface in self._implied
       
>>>>>>     __call__ = isOrExtends
       
>>>>>> SpecificationBase = SpecificationBasePy
>>>>>> try:
>>>>>>     from _zope_interface_coptimizations import SpecificationBase
       except ImportError: #pragma NO COVER
>>>>>>     pass
       
>>>>>> _marker = object()
>>>>>> class InterfaceBasePy(object):
           """Base class that wants to be replaced with a C base :)
           """
       
>>>>>>     def __call__(self, obj, alternate=_marker):
               """Adapt an object to the interface
               """
>>>>>>         conform = getattr(obj, '__conform__', None)
>>>>>>         if conform is not None:
>>>>>>             adapter = self._call_conform(conform)
>>>>>>             if adapter is not None:
>>>>>>                 return adapter
       
>>>>>>         adapter = self.__adapt__(obj)
       
>>>>>>         if adapter is not None:
>>>>>>             return adapter
>>>>>>         elif alternate is not _marker:
>>>>>>             return alternate
               else:
>>>>>>             raise TypeError("Could not adapt", obj, self)
       
>>>>>>     def __adapt__(self, obj):
               """Adapt an object to the reciever
               """
>>>>>>         if self.providedBy(obj):
>>>>>>             return obj
       
>>>>>>         for hook in adapter_hooks:
>>>>>>             adapter = hook(self, obj)
>>>>>>             if adapter is not None:
>>>>>>                 return adapter
       
           
>>>>>> InterfaceBase = InterfaceBasePy
>>>>>> try:
>>>>>>     from _zope_interface_coptimizations import InterfaceBase
       except ImportError: #pragma NO COVER
>>>>>>     pass
       
       
>>>>>> adapter_hooks = []
>>>>>> try:
>>>>>>     from _zope_interface_coptimizations import adapter_hooks
       except ImportError: #pragma NO COVER
>>>>>>     pass
       
       
>>>>>> class Specification(SpecificationBase):
           """Specifications
       
           An interface specification is used to track interface declarations
           and component registrations.
       
           This class is a base class for both interfaces themselves and for
           interface specifications (declarations).
       
           Specifications are mutable.  If you reassign their bases, their
           relations with other specifications are adjusted accordingly.
           """
       
           # Copy some base class methods for speed
>>>>>>     isOrExtends = SpecificationBase.isOrExtends
>>>>>>     providedBy = SpecificationBase.providedBy
       
>>>>>>     def __init__(self, bases=()):
  106:         self._implied = {}
  106:         self.dependents = weakref.WeakKeyDictionary()
  106:         self.__bases__ = tuple(bases)
       
>>>>>>     def subscribe(self, dependent):
  261:         self.dependents[dependent] = self.dependents.get(dependent, 0) + 1
       
>>>>>>     def unsubscribe(self, dependent):
   78:         n = self.dependents.get(dependent, 0) - 1
   78:         if not n:
   78:             del self.dependents[dependent]
>>>>>>         elif n > 0:
>>>>>>             self.dependents[dependent] = n
               else:
>>>>>>             raise KeyError(dependent)
       
>>>>>>     def __setBases(self, bases):
               # Register ourselves as a dependent of our old bases
  222:         for b in self.__bases__:
   78:             b.unsubscribe(self)
       
               # Register ourselves as a dependent of our bases
  144:         self.__dict__['__bases__'] = bases
  397:         for b in bases:
  253:             b.subscribe(self)
       
  144:         self.changed(self)
       
>>>>>>     __bases__ = property(
       
 1190:         lambda self: self.__dict__.get('__bases__', ()),
>>>>>>         __setBases,
               )
       
>>>>>>     def changed(self, originally_changed):
               """We, or something we depend on, have changed
               """
  144:         try:
  144:             del self._v_attrs
  144:         except AttributeError:
  144:             pass
       
  144:         implied = self._implied
  144:         implied.clear()
       
  144:         ancestors = ro(self)
       
  144:         try:
  144:             if Interface not in ancestors:
   86:                 ancestors.append(Interface)
>>>>>>         except NameError:
>>>>>>             pass # defining Interface itself
       
  144:         self.__sro__ = tuple(ancestors)
  998:         self.__iro__ = tuple([ancestor for ancestor in ancestors
  854:                               if isinstance(ancestor, InterfaceClass)
                                     ])
       
  998:         for ancestor in ancestors:
                   # We directly imply our ancestors:
  854:             implied[ancestor] = ()
       
               # Now, advise our dependents of change:
  144:         for dependent in tuple(self.dependents.keys()):
>>>>>>             dependent.changed(originally_changed)
       
       
>>>>>>     def interfaces(self):
               """Return an iterator for the interfaces in the specification.
               """
    2:         seen = {}
    8:         for base in self.__bases__:
   11:             for interface in base.interfaces():
    5:                 if interface not in seen:
    5:                     seen[interface] = 1
    5:                     yield interface
       
       
>>>>>>     def extends(self, interface, strict=True):
               """Does the specification extend the given interface?
       
               Test whether an interface in the specification extends the
               given interface
               """
>>>>>>         return ((interface in self._implied)
                       and
>>>>>>                 ((not strict) or (self != interface))
                       )
       
>>>>>>     def weakref(self, callback=None):
    8:         return weakref.ref(self, callback)
       
>>>>>>     def get(self, name, default=None):
               """Query for an attribute description
               """
>>>>>>         try:
>>>>>>             attrs = self._v_attrs
>>>>>>         except AttributeError:
>>>>>>             attrs = self._v_attrs = {}
>>>>>>         attr = attrs.get(name)
>>>>>>         if attr is None:
>>>>>>             for iface in self.__iro__:
>>>>>>                 attr = iface.direct(name)
>>>>>>                 if attr is not None:
>>>>>>                     attrs[name] = attr
>>>>>>                     break
       
>>>>>>         if attr is None:
>>>>>>             return default
               else:
>>>>>>             return attr
       
>>>>>> class InterfaceClass(Element, InterfaceBase, Specification):
           """Prototype (scarecrow) Interfaces Implementation."""
       
           # We can't say this yet because we don't have enough
           # infrastructure in place.
           #
           #implements(IInterface)
       
>>>>>>     def __init__(self, name, bases=(), attrs=None, __doc__=None,
>>>>>>                  __module__=None):
       
    7:         if attrs is None:
>>>>>>             attrs = {}
       
    7:         if __module__ is None:
    7:             __module__ = attrs.get('__module__')
    7:             if isinstance(__module__, str):
    7:                 del attrs['__module__']
                   else:
>>>>>>                 try:
                           # Figure out what module defined the interface.
                           # This is how cPython figures out the module of
                           # a class, but of course it does it in C. :-/
>>>>>>                     __module__ = sys._getframe(1).f_globals['__name__']
                       except (AttributeError, KeyError): #pragma NO COVERAGE
>>>>>>                     pass
       
    7:         self.__module__ = __module__
       
    7:         d = attrs.get('__doc__')
    7:         if d is not None:
    5:             if not isinstance(d, Attribute):
    5:                 if __doc__ is None:
    5:                     __doc__ = d
    5:                 del attrs['__doc__']
       
    7:         if __doc__ is None:
    2:             __doc__ = ''
       
    7:         Element.__init__(self, name, __doc__)
       
    7:         tagged_data = attrs.pop(TAGGED_DATA, None)
    7:         if tagged_data is not None:
>>>>>>             for key, val in tagged_data.items():
>>>>>>                 self.setTaggedValue(key, val)
       
   14:         for base in bases:
    7:             if not isinstance(base, InterfaceClass):
>>>>>>                 raise TypeError('Expected base interfaces')
       
    7:         Specification.__init__(self, bases)
       
               # Make sure that all recorded attributes (and methods) are of type
               # `Attribute` and `Method`
   47:         for name, attr in list(attrs.items()):
   40:             if name in ('__locals__', '__qualname__'):
                       # __locals__: Python 3 sometimes adds this.
                       # __qualname__: PEP 3155 (Python 3.3+)
>>>>>>                 del attrs[name]
>>>>>>                 continue
   40:             if isinstance(attr, Attribute):
   17:                 attr.interface = self
   17:                 if not attr.__name__:
   17:                     attr.__name__ = name
   23:             elif isinstance(attr, FunctionType):
   23:                 attrs[name] = fromFunction(attr, self, name=name)
>>>>>>             elif attr is _decorator_non_return:
>>>>>>                 del attrs[name]
                   else:
>>>>>>                 raise InvalidInterface("Concrete attribute, " + name)
       
    7:         self.__attrs = attrs
       
    7:         self.__identifier__ = "%s.%s" % (self.__module__, self.__name__)
       
>>>>>>     def interfaces(self):
               """Return an iterator for the interfaces in the specification.
               """
    5:         yield self
       
>>>>>>     def getBases(self):
>>>>>>         return self.__bases__
       
>>>>>>     def isEqualOrExtendedBy(self, other):
               """Same interface or extends?"""
>>>>>>         return self == other or other.extends(self)
       
>>>>>>     def names(self, all=False):
               """Return the attribute names defined by the interface."""
>>>>>>         if not all:
>>>>>>             return self.__attrs.keys()
       
>>>>>>         r = self.__attrs.copy()
       
>>>>>>         for base in self.__bases__:
>>>>>>             r.update(dict.fromkeys(base.names(all)))
       
>>>>>>         return r.keys()
       
>>>>>>     def __iter__(self):
>>>>>>         return iter(self.names(all=True))
       
>>>>>>     def namesAndDescriptions(self, all=False):
               """Return attribute names and descriptions defined by interface."""
   10:         if not all:
>>>>>>             return self.__attrs.items()
       
   10:         r = {}
   15:         for base in self.__bases__[::-1]:
    5:             r.update(dict(base.namesAndDescriptions(all)))
       
   10:         r.update(self.__attrs)
       
   10:         return r.items()
       
>>>>>>     def getDescriptionFor(self, name):
               """Return the attribute description for the given name."""
>>>>>>         r = self.get(name)
>>>>>>         if r is not None:
>>>>>>             return r
       
>>>>>>         raise KeyError(name)
       
>>>>>>     __getitem__ = getDescriptionFor
       
>>>>>>     def __contains__(self, name):
>>>>>>         return self.get(name) is not None
       
>>>>>>     def direct(self, name):
>>>>>>         return self.__attrs.get(name)
       
>>>>>>     def queryDescriptionFor(self, name, default=None):
>>>>>>         return self.get(name, default)
       
>>>>>>     def validateInvariants(self, obj, errors=None):
               """validate object to defined invariants."""
>>>>>>         for call in self.queryTaggedValue('invariants', []):
>>>>>>             try:
>>>>>>                 call(obj)
>>>>>>             except Invalid as e:
>>>>>>                 if errors is None:
>>>>>>                     raise
                       else:
>>>>>>                     errors.append(e)
>>>>>>         for base in self.__bases__:
>>>>>>             try:
>>>>>>                 base.validateInvariants(obj, errors)
>>>>>>             except Invalid:
>>>>>>                 if errors is None:
>>>>>>                     raise
>>>>>>         if errors:
>>>>>>             raise Invalid(errors)
       
>>>>>>     def __repr__(self):  # pragma: no cover
>>>>>>         try:
>>>>>>             return self._v_repr
>>>>>>         except AttributeError:
>>>>>>             name = self.__name__
>>>>>>             m = self.__module__
>>>>>>             if m:
>>>>>>                 name = '%s.%s' % (m, name)
>>>>>>             r = "<%s %s>" % (self.__class__.__name__, name)
>>>>>>             self._v_repr = r
>>>>>>             return r
       
>>>>>>     def _call_conform(self, conform):
   34:         try:
   34:             return conform(self)
               except TypeError: #pragma NO COVER
                   # We got a TypeError. It might be an error raised by
                   # the __conform__ implementation, or *we* may have
                   # made the TypeError by calling an unbound method
                   # (object is a class).  In the later case, we behave
                   # as though there is no __conform__ method. We can
                   # detect this case by checking whether there is more
                   # than one traceback object in the traceback chain:
>>>>>>             if sys.exc_info()[2].tb_next is not None:
                       # There is more than one entry in the chain, so
                       # reraise the error:
>>>>>>                 raise
                   # This clever trick is from Phillip Eby
       
               return None #pragma NO COVER
       
>>>>>>     def __reduce__(self):
>>>>>>         return self.__name__
       
>>>>>>     def __cmp(self, other):
               # Yes, I did mean to name this __cmp, rather than __cmp__.
               # It is a private method used by __lt__ and __gt__.
               # I don't want to override __eq__ because I want the default
               # __eq__, which is really fast.
               """Make interfaces sortable
       
               TODO: It would ne nice if:
       
                  More specific interfaces should sort before less specific ones.
                  Otherwise, sort on name and module.
       
                  But this is too complicated, and we're going to punt on it
                  for now.
       
               For now, sort on interface and module name.
       
               None is treated as a pseudo interface that implies the loosest
               contact possible, no contract. For that reason, all interfaces
               sort before None.
       
               """
  638:         if other is None:
>>>>>>             return -1
       
  638:         n1 = (getattr(self, '__name__', ''), getattr(self,  '__module__', ''))
  638:         n2 = (getattr(other, '__name__', ''), getattr(other,  '__module__', ''))
       
               # This spelling works under Python3, which doesn't have cmp().
  638:         return (n1 > n2) - (n1 < n2)
       
>>>>>>     def __hash__(self):
 1867:         d = self.__dict__
 1867:         if '__module__' not in d or '__name__' not in d: #pragma NO COVER
>>>>>>             warnings.warn('Hashing uninitialized InterfaceClass instance')
>>>>>>             return 1
 1867:         return hash((self.__name__, self.__module__))
       
>>>>>>     def __eq__(self, other):
  638:         c = self.__cmp(other)
  638:         return c == 0
       
>>>>>>     def __ne__(self, other):
>>>>>>         c = self.__cmp(other)
>>>>>>         return c != 0
       
>>>>>>     def __lt__(self, other):
>>>>>>         c = self.__cmp(other)
>>>>>>         return c < 0
       
>>>>>>     def __le__(self, other):
>>>>>>         c = self.__cmp(other)
>>>>>>         return c <= 0
       
>>>>>>     def __gt__(self, other):
>>>>>>         c = self.__cmp(other)
>>>>>>         return c > 0
       
>>>>>>     def __ge__(self, other):
>>>>>>         c = self.__cmp(other)
>>>>>>         return c >= 0
       
       
>>>>>> Interface = InterfaceClass("Interface", __module__ = 'zope.interface')
       
>>>>>> class Attribute(Element):
           """Attribute descriptions
           """
       
           # We can't say this yet because we don't have enough
           # infrastructure in place.
           #
           # implements(IAttribute)
       
>>>>>>     interface = None
       
       
>>>>>> class Method(Attribute):
           """Method interfaces
       
           The idea here is that you have objects that describe methods.
           This provides an opportunity for rich meta-data.
           """
       
           # We can't say this yet because we don't have enough
           # infrastructure in place.
           #
           # implements(IMethod)
       
>>>>>>     positional = required = ()
>>>>>>     _optional = varargs = kwargs = None
>>>>>>     def _get_optional(self):
   32:         if self._optional is None:
>>>>>>             return {}
   32:         return self._optional
>>>>>>     def _set_optional(self, opt):
   39:         self._optional = opt
>>>>>>     def _del_optional(self):
>>>>>>         self._optional = None
>>>>>>     optional = property(_get_optional, _set_optional, _del_optional)
       
>>>>>>     def __call__(self, *args, **kw):
>>>>>>         raise BrokenImplementation(self.interface, self.__name__)
       
>>>>>>     def getSignatureInfo(self):
   32:         return {'positional': self.positional,
   32:                 'required': self.required,
   32:                 'optional': self.optional,
   32:                 'varargs': self.varargs,
   32:                 'kwargs': self.kwargs,
                       }
       
>>>>>>     def getSignatureString(self):
>>>>>>         sig = []
>>>>>>         for v in self.positional:
>>>>>>             sig.append(v)
>>>>>>             if v in self.optional.keys():
>>>>>>                 sig[-1] += "=" + repr(self.optional[v])
>>>>>>         if self.varargs:
>>>>>>             sig.append("*" + self.varargs)
>>>>>>         if self.kwargs:
>>>>>>             sig.append("**" + self.kwargs)
       
>>>>>>         return "(%s)" % ", ".join(sig)
       
>>>>>> def fromFunction(func, interface=None, imlevel=0, name=None):
   39:     name = name or func.__name__
   39:     method = Method(name, func.__doc__)
   39:     defaults = getattr(func, '__defaults__', None) or ()
   39:     code = func.__code__
           # Number of positional arguments
   39:     na = code.co_argcount-imlevel
   39:     names = code.co_varnames[imlevel:]
   39:     opt = {}
           # Number of required arguments
   39:     nr = na-len(defaults)
   39:     if nr < 0:
>>>>>>         defaults=defaults[-nr:]
>>>>>>         nr = 0
       
           # Determine the optional arguments.
   39:     opt.update(dict(zip(names[nr:], defaults)))
       
   39:     method.positional = names[:na]
   39:     method.required = names[:nr]
   39:     method.optional = opt
       
   39:     argno = na
       
           # Determine the function's variable argument's name (i.e. *args)
   39:     if code.co_flags & CO_VARARGS:
>>>>>>         method.varargs = names[argno]
>>>>>>         argno = argno + 1
           else:
   39:         method.varargs = None
       
           # Determine the function's keyword argument's name (i.e. **kw)
   39:     if code.co_flags & CO_VARKEYWORDS:
>>>>>>         method.kwargs = names[argno]
           else:
   39:         method.kwargs = None
       
   39:     method.interface = interface
       
   39:     for key, value in func.__dict__.items():
>>>>>>         method.setTaggedValue(key, value)
       
   39:     return method
       
       
>>>>>> def fromMethod(meth, interface=None, name=None):
   16:     if isinstance(meth, MethodType):
   16:         func = meth.__func__
           else:
>>>>>>         func = meth
   16:     return fromFunction(func, interface, imlevel=1, name=name)
       
       
       # Now we can create the interesting interfaces and wire them up:
>>>>>> def _wire():
>>>>>>     from zope.interface.declarations import classImplements
       
>>>>>>     from zope.interface.interfaces import IAttribute
>>>>>>     classImplements(Attribute, IAttribute)
       
>>>>>>     from zope.interface.interfaces import IMethod
>>>>>>     classImplements(Method, IMethod)
       
>>>>>>     from zope.interface.interfaces import IInterface
>>>>>>     classImplements(InterfaceClass, IInterface)
       
>>>>>>     from zope.interface.interfaces import ISpecification
>>>>>>     classImplements(Specification, ISpecification)
       
       # We import this here to deal with module dependencies.
>>>>>> from zope.interface.declarations import implementedBy
>>>>>> from zope.interface.declarations import providedBy
>>>>>> from zope.interface.exceptions import InvalidInterface
>>>>>> from zope.interface.exceptions import BrokenImplementation
