       #!/usr/bin/env python
       # -*- coding: utf-8 -*-
       
    1: from twisted.internet.protocol import Factory
    1: from twisted.protocols.basic import LineReceiver
       
       
    2: class ChatProtocol(LineReceiver):
       
    1:     def __init__(self, factory):
    4:         self.factory = factory
    4:         self.name = None
    4:         self.state = 'REGISTER'
       
    1:     def connectionMade(self):
    4:         self.sendLine("What's your name?")
       
    1:     def connectionLost(self, reason):
>>>>>>         if self.name in self.factory.users:
>>>>>>             del self.factory.users[self.name]
>>>>>>             self.broadcastMessage("%s has left the channel." % (self.name,))
       
    1:     def lineReceived(self, line):
    3:         if self.state == 'REGISTER':
    3:             self.handle_REGISTER(line)
               else:
>>>>>>             self.handle_CHAT(line)
       
    1:     def handle_REGISTER(self, name):
    3:         if name in self.factory.users:
>>>>>>             self.sendLine('Name taken, please choose another.')
>>>>>>             return
       
    3:         self.sendLine('Welcome, %s!' % (name,))
    3:         self.broadcastMessage('%s has joined the channel.' % (name,))
    3:         self.name = name
    3:         self.factory.users[name] = self
    3:         self.state = 'CHAT'
       
    1:     def handle_CHAT(self, message):
>>>>>>         message = '<%s> %s' % (self.name, message)
>>>>>>         self.broadcastMessage(message)
       
    1:     def broadcastMessage(self, message):
    4:         for name, protocol in self.factory.users.iteritems():
    1:             if protocol != self:
    1:                 protocol.sendLine(message)
       
    2: class ChatFactory(Factory):
       
    1:     def __init__(self):
    3:         self.users = {}
       
    1:     def buildProtocol(self, addr):
    4:         return ChatProtocol(self)
